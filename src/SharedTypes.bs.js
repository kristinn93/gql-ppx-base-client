// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");

function extensionsDecoder(json) {
  return {
          code: Json_decode.field("code", (function (param) {
                  return Json_decode.optional(Json_decode.$$int, param);
                }), json),
          messageUser: Json_decode.field("messageUser", (function (param) {
                  return Json_decode.optional(Json_decode.string, param);
                }), json),
          type_: Json_decode.field("type", Json_decode.string, json)
        };
}

function locationDecoder(json) {
  return {
          column: Json_decode.field("column", (function (param) {
                  return Json_decode.optional(Json_decode.$$int, param);
                }), json),
          line: Json_decode.field("line", (function (param) {
                  return Json_decode.optional(Json_decode.$$int, param);
                }), json)
        };
}

function graphQLerrorDecoder(json) {
  return {
          message: Json_decode.field("message", Json_decode.string, json),
          locations: Belt_Option.getWithDefault(Json_decode.optional((function (param) {
                      return Json_decode.field("locations", (function (param) {
                                    return Json_decode.list(locationDecoder, param);
                                  }), param);
                    }), json), /* [] */0),
          extensions: Json_decode.field("extensions", extensionsDecoder, json)
        };
}

var AuthenticationException = /* @__PURE__ */Caml_exceptions.create("SharedTypes.Errors.AuthenticationException");

var FetchError = /* @__PURE__ */Caml_exceptions.create("SharedTypes.Errors.FetchError");

var NotFound = /* @__PURE__ */Caml_exceptions.create("SharedTypes.Errors.NotFound");

var GraphQLError = /* @__PURE__ */Caml_exceptions.create("SharedTypes.Errors.GraphQLError");

var Errors = {
  extensionsDecoder: extensionsDecoder,
  locationDecoder: locationDecoder,
  graphQLerrorDecoder: graphQLerrorDecoder,
  AuthenticationException: AuthenticationException,
  FetchError: FetchError,
  NotFound: NotFound,
  GraphQLError: GraphQLError
};

function algoliaSearchKeyDecoder(json) {
  return {
          key: Json_decode.field("key", Json_decode.string, json),
          timeToLive: Json_decode.field("timeToLive", Json_decode.string, json)
        };
}

function algoliaSearchKeyResponseDecoder(json) {
  var decoderWithError = function (json) {
    return {
            data: Json_decode.field("data", (function (param) {
                    return Json_decode.optional((function (param) {
                                  return Json_decode.field("algoliaSearchKey", algoliaSearchKeyDecoder, param);
                                }), param);
                  }), json),
            errors: Json_decode.field("errors", (function (param) {
                    return Json_decode.optional((function (param) {
                                  return Json_decode.list(graphQLerrorDecoder, param);
                                }), param);
                  }), json)
          };
  };
  var decoderWithNoneError = function (json) {
    return {
            data: Json_decode.field("data", (function (param) {
                    return Json_decode.optional((function (param) {
                                  return Json_decode.field("algoliaSearchKey", algoliaSearchKeyDecoder, param);
                                }), param);
                  }), json),
            errors: undefined
          };
  };
  return Json_decode.oneOf({
              hd: decoderWithError,
              tl: {
                hd: decoderWithNoneError,
                tl: /* [] */0
              }
            }, json);
}

function bidIncrementsDecoder(json) {
  return {
          from: Json_decode.field("from", Json_decode.$$int, json),
          increment: Json_decode.field("increment", Json_decode.$$int, json)
        };
}

var ClientApi = {
  algoliaSearchKeyDecoder: algoliaSearchKeyDecoder,
  algoliaSearchKeyResponseDecoder: algoliaSearchKeyResponseDecoder,
  bidIncrementsDecoder: bidIncrementsDecoder
};

var _map = {"EUR":"EUR","USD":"USD","GBP":"GBP","HKD":"HKD","CNY":"CNY","CHF":"CHF","QAR":"QAR","JPY":"JPY"};

function currencyToJs(param) {
  return param;
}

function currencyFromJs(param) {
  return _map[param];
}

exports.Errors = Errors;
exports.ClientApi = ClientApi;
exports.currencyToJs = currencyToJs;
exports.currencyFromJs = currencyFromJs;
/* No side effect */
